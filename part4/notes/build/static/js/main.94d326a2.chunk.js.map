{"version":3,"sources":["components/Note.js","components/Notifications.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCKjCK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAU,QAAf,SACKI,KCQEC,EAfA,WAOX,OACI,sBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACI,uBACA,2G,gBCXNC,EAAU,aAuBD,EArBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAc,CAChBC,GAAI,IACJd,QAAS,mCACTe,KAAM,2BACNjB,WAAW,GAEf,OAAOY,EAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAON,OAa5C,EAVA,SAACO,GAEZ,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQhC,EALA,SAACJ,EAAIM,GAEhB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SC8EhCK,EA7FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEKlB,MAAK,SAAAmB,GAAY,OAAIT,EAASS,QAClC,IAEH,IAAMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAKG,aA+B1BwC,EAAqB,SAAAxB,GACzB,IAAMnB,EAAO8B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAQ9C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACYpB,EAAI2B,GACXzB,MAAK,SAAA0B,GACJhB,EAASD,EAAMkB,KAAI,SAAAhD,GAAI,OAAIA,EAAKmB,KAAOA,EAAKnB,EAAO+C,SAEpDE,OAAM,SAAAC,GACLb,EAAgB,aAAD,OACErC,EAAKK,QADP,sCAGf8C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,UAK5C,OACI,gCACE,uCAEA,cAAC,EAAD,CAAcX,QAAS4B,IAEvB,8BACE,yBAAQ9B,QAAS,kBAAM6B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BA7DaO,EAAYO,KAAI,SAAAhD,GAAI,OACnC,cAAC,EAAD,CAEIA,KAAMA,EACNC,iBAAkB,kBAAM0C,EAAmB3C,EAAKmB,MAF3CnB,EAAKmB,SA8DZ,uBAAMiC,SApDI,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBlD,QAAS2B,EACTZ,MAAM,IAAIoC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,GAC3BxC,GAAIW,EAAM8B,OAAS,GAGrBrB,EACYgB,GACPlC,MAAK,SAAAE,GACJQ,EAASD,EAAMN,OAAOD,IACtBU,EAAW,QAuCb,UACE,uBACI4B,MAAO7B,EACP8B,SA3Da,SAACT,GACxBpB,EAAWoB,EAAMU,OAAOF,UA4DlB,wBAAQG,KAAK,SAAb,qBAGF,cAAC,EAAD,Q,MCzFRC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.94d326a2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nexport default Footer\n","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true,\n    };\n    return request.then((response) => response.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notifications'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  useEffect(() => {\n    noteService\n        .getAll()\n        .then(initialNotes => setNotes(initialNotes))\n  }, [])\n\n  const notesToShow = showAll\n      ? notes\n      : notes.filter(note => note.important)\n\n  const rows = () => notesToShow.map(note =>\n      <Note\n          key={note.id}\n          note={note}\n          toggleImportance={() => toggleImportanceOf(note.id)}\n      />\n  )\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n        .create(noteObject)\n        .then(data => {\n          setNotes(notes.concat(data))\n          setNewNote('')\n        })\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n        .update(id, changedNote)\n        .then(returnedNote => {\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n        .catch(error => {\n          setErrorMessage(\n              `the note '${note.content}' was already removed from server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setNotes(notes.filter(n => n.id !== id))\n        })\n\n  }\n\n  return (\n      <div>\n        <h1>Notes</h1>\n\n        <Notification message={errorMessage} />\n\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all'}\n          </button>\n        </div>\n        <ul>\n          {rows()}\n        </ul>\n        <form onSubmit={addNote}>\n          <input\n              value={newNote}\n              onChange={handleNoteChange}\n          />\n          <button type=\"submit\">save</button>\n        </form>\n\n        <Footer />\n      </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}